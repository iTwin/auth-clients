trigger:
- main

pr:
  drafts: false
  branches:
    include:
      - main

resources:
  repositories:
    - repository: build-pipeline-scripts
      type: git
      ref: master
      name: iModelTechnologies/imodeljs-build-pipeline-scripts

stages:
- stage: Build
  displayName: Build
  jobs:
    - job: BuildPackages
      strategy:
        matrix:
          linux:
            imageName: 'ubuntu-latest'
          mac:
            imageName: 'macos-latest'
          windows:
            imageName: 'windows-latest'
      pool:
        vmImage: $(imageName)
      steps:
        - bash: |
          git config --local user.email imodeljs-admin@users.noreply.github.com
          git config --local user.name imodeljs-admin
        displayName: Git Config

      - script: node common/scripts/install-run-rush.js install
        displayName: Rush Install

      - script: node common/scripts/install-run-rush.js build -v -p max
        displayName: Rush Build

      - script: node common/scripts/install-run-rush.js lint
        displayName: Rush Lint

      # By default linux agents do not have a real display so use the virtual framebuffer
      - script: xvfb-run --auto-servernum --server-args='-screen 0, 1600x900x24' node common/scripts/install-run-rush.js cover --verbose
        displayName: Rush Cover - Linux
        condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))

      # MacOS and Windows agents work without any virtual display
      - script: node common/scripts/install-run-rush.js cover --verbose
        displayName: Rush Cover - Windows/Mac
        condition: and(succeeded(), ne(variables['Agent.OS'], 'Linux'))

      - template: ./publish-test-results.yaml

      - script: rush pack
        displayName: Rush Pack

      # publish artifact

      - bash: |
          browserAuthVer=$(node -p "require('./packages/browser/package.json').version")
          browserAuthName=$(node -p "require('./packages/browser/package.json').name")
          ServiceAuthVer=$(node -p "require('./packages/service/package.json').version")
          ServiceAuthName=$(node -p "require('./packages/service/package.json').name")
          oidcSignInToolVer=$(node -p "require('./packages/oidc-signin-tool/package.json').version")
          oidcSignInToolName=$(node -p "require('./packages/oidc-signin-tool/package.json').name")

          checkVer() {
            localVer=$1
            name=$2

            remoteVer=$(npm view $name version)
            if [ -z "$remoteVer" ]; then
              remoteVer=0.0.0
            fi

            olderVer=$(printf '%s\n' "$localVer" "$remoteVer" | sort -V | head -n1)
            if [ "$localVer" != "$remoteVer" ] && [ "$remoteVer" = "$olderVer" ]; then
              echo true
            else
              echo false
            fi
          }

          updateBrowser=$(checkVer $browserAuthVer $browserAuthName)
          updateService=$(checkVer $ServiceAuthVer $ServiceAuthName)
          updateOidcSignInTool=$(checkVer $oidcSignInToolVer $oidcSignInToolName)

          if [ "$updateBrowser" = "true" ] && [ "$updateBrowser" = "$updateService" ] && [ "$browserAuthVer" = "$ServiceAuthVer" ]; then
            echo "Auth package publishing conditions are met."
            shouldPublishAuthClients=true
          else
            echo "Auth package publishing conditions not met."
            shouldPublishAuthClients=false
          fi

          if [ "$updateOidcSignInTool" = "true" ]; then
            echo "Oidc-signin-tool package publishing conditions are met."
            shouldPublishSignInTool=true
          else
            echo "Oidc-signin-tool package publishing conditions not met."
            shouldPublishSignInTool=false
          fi

          echo "##vso[task.setvariable variable=shouldPublishAuthClients;isOutput=true]$shouldPublishAuthClients"
          echo "##vso[task.setvariable variable=shouldPublishSignInTool;isOutput=true]$shouldPublishSignInTool"
          echo "##vso[task.setvariable variable=browserAuthVer;isOutput=true]$browserAuthVer"
          echo "##vso[task.setvariable variable=browserAuthName;isOutput=true]$browserAuthName"
          echo "##vso[task.setvariable variable=ServiceAuthVer;isOutput=true]$ServiceAuthVer"
          echo "##vso[task.setvariable variable=ServiceAuthName;isOutput=true]$ServiceAuthName"
          echo "##vso[task.setvariable variable=oidcSignInToolVer;isOutput=true]$oidcSignInToolVer"
          echo "##vso[task.setvariable variable=oidcSignInToolName;isOutput=true]$oidcSignInToolName"

        displayName: 'Store Build Info'
        name: info
        condition: and(succeeded(), eq(variables.try_publish, true), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Agent.OS'], 'Linux'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/packages/browser/itwin-browser-authorization-$(info.browserAuthVer).tgz'
          artifactName: BrowserAuthorizationClient
        displayName: 'Publish Browser Auth'
        condition: and(succeeded(), eq(variables['info.shouldPublishAuthClients'], 'true'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/packages/service/itwin-service-authorization-$(info.ServiceAuthVer).tgz'
          artifactName: ServiceAuthorizationClient
        displayName: 'Publish Service Auth'
        condition: and(succeeded(), eq(variables['info.shouldPublishAuthClients'], 'true'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/packages/oidc-signin-tool/itwin-oidc-signin-tool-$(info.oidcSignInToolVer).tgz'
          artifactName: OIDCSignInTool
        displayName: 'Publish OIDC Sign In Tool'
        condition: and(succeeded(), eq(variables['info.shouldPublishSignInTool'], 'true'))

- stage: Publish_Auth_Clients
  displayName: Publish Auth Clients
  condition: and(succeeded(), eq(dependencies.Build.outputs['BuildPackages.linux.info.shouldPublishAuthClients'], 'true'))
  dependsOn: Build

  jobs:
    - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
      parameters:
        path: '*.tgz'
        artifactName: BrowserAuthorizationClient
        name: BrowserAuthorizationClient
    - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
      parameters:
        path: '*.tgz'
        artifactName: ServiceAuthorizationClient
        name: ServiceAuthorizationClient

- stage: Publish_Oidc_Sign_In_Tool
  displayName: Publish OIDC Sign In Tool
  condition: and(succeeded(), eq(dependencies.Build.outputs['BuildPackages.linux.info.shouldPublishSignInTool'], 'true'))
  dependsOn: Build

  jobs:
    - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
      parameters:
        path: '*.tgz'
        artifactName: OIDCSignInTool
        name: OIDCSignInTool
