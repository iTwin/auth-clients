trigger:
- main

pr:
  drafts: false
  branches:
    include:
      - main

resources:
  repositories:
    - repository: build-pipeline-scripts
      type: git
      ref: master
      name: iModelTechnologies/imodeljs-build-pipeline-scripts

stages:
- stage: Build
  displayName: Build
  jobs:
    - job: BuildPackages
      strategy:
        matrix:
          linux:
            imageName: 'ubuntu-latest'
          mac:
            imageName: 'macos-latest'
          windows:
            imageName: 'windows-latest'
      pool:
        vmImage: $(imageName)
      steps:
      - script: npm install -g pnpm
        displayName: 'Install pnpm'

      - script: pnpm install
        displayName: 'Install dependencies'

      - script: pnpm run build
        displayName: 'Build'

      - script: pnpm run lint
        displayName: 'Lint'

      - script: pnpm run cover
        displayName: 'cover'

      ## TODO need to publish test results as part of build.

      - bash: |
          pnpm run pack
        displayName: 'pnpm run pack'

      # publish artifact

      - bash: |
          BrowserAuthVer=$(node -p "require('./packages/browser/package.json').version")
          BrowserAuthName=$(node -p "require('./packages/browser/package.json').name")
          ServiceAuthVer=$(node -p "require('./packages/service/package.json').version")
          ServiceAuthName=$(node -p "require('./packages/service/package.json').name")
          ElectronAuthVer=$(node -p "require('./packages/electron/package.json').version")
          ElectronAuthName=$(node -p "require('./packages/electron/package.json').name")

          checkVer() {
            localVer=$1
            name=$2

            remoteVer=$(npm view $name version)
            if [ -z "$remoteVer" ]; then
              remoteVer=0.0.0
            fi

            olderVer=$(printf '%s\n' "$localVer" "$remoteVer" | sort -V | head -n1)
            if [ "$localVer" != "$remoteVer" ] && [ "$remoteVer" = "$olderVer" ]; then
              echo true
            else
              echo false
            fi
          }

          # updateBrowser=$(checkVer $BrowserAuthVer $BrowserAuthName)
          # updateService=$(checkVer $ServiceAuthVer $ServiceAuthName)
          # updateElectron=$(checkVer $ServiceAuthVer $ServiceAuthName)
          updateBrowser=true
          updateService=true
          updateElectron=true

          if [ "$updateBrowser" = "true" ] && [ "$updateBrowser" = "$updateService" ] && [ "$updateBrowser" = "$updateElectron" ] && [ "$BrowserAuthVer" = "$ServiceAuthVer" ] && [ "$BrowserAuthVer" = "$ElectronAuthVer" ]; then
            echo "package publishing conditions are met."
            shouldPublish=true
          else
            echo "package publishing conditions not met."
            shouldPublish=false
          fi

          echo "##vso[task.setvariable variable=shouldPublish;isOutput=true]$shouldPublish"
          echo "##vso[task.setvariable variable=BrowserAuthVer;isOutput=true]$BrowserAuthVer"
          echo "##vso[task.setvariable variable=BrowserAuthName;isOutput=true]$BrowserAuthName"
          echo "##vso[task.setvariable variable=ServiceAuthVer;isOutput=true]$ServiceAuthVer"
          echo "##vso[task.setvariable variable=ServiceAuthName;isOutput=true]$ServiceAuthName"
          echo "##vso[task.setvariable variable=ElectronAuthVer;isOutput=true]$ElectronAuthVer"
          echo "##vso[task.setvariable variable=ElectronAuthName;isOutput=true]$ElectronAuthName"


        displayName: 'Store Build Info'
        name: info
        condition: and(succeeded(), eq(variables.try_publish, true), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Agent.OS'], 'Linux'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/packages/browser/itwin-browser-authorization-$(info.BrowserAuthVer).tgz'
          artifactName: BrowserAuthorizationClient
        displayName: 'Publish Browser Auth'
        condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/packages/service/itwin-service-authorization-$(info.ServiceAuthVer).tgz'
          artifactName: ServiceAuthorizationClient
        displayName: 'Publish Service Auth'
        condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/packages/electron/itwin-service-authorization-$(info.ElectronAuthVer).tgz'
          artifactName: ElectronAuthorizationClient
        displayName: 'Publish Electron Auth'
        condition: and(succeeded(), eq(variables['info.shouldPublish'], 'true'))


- stage: Publish
  displayName: Publish
  condition: and(succeeded(), eq(dependencies.Build.outputs['BuildPackages.linux.info.shouldPublish'], 'true'))
  dependsOn: Build

  jobs:
    - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
      parameters:
        path: '*.tgz'
        artifactName: BrowserAuthorizationClient
        name: BrowserAuthorizationClient
    - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
      parameters:
        path: '*.tgz'
        artifactName: ServiceAuthorizationClient
        name: ServiceAuthorizationClient
    - template: templates/npmjs-publish-deployment.yaml@build-pipeline-scripts
      parameters:
        path: '*.tgz'
        artifactName: ElectronAuthorizationClient
        name: ElectronAuthorizationClient
