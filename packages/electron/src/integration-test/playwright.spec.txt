import { test, expect } from '@playwright/test';

test('one is one', () => {
  expect(1).toBe(1);
});

test('has title', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Expect a title "to contain" a substring.
  await expect(page).toHaveTitle(/Playwright/);
});

test('get started link', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Click the get started link.
  await page.getByRole('link', { name: 'Get started' }).click();

  // Expects the URL to contain intro.
  await expect(page).toHaveURL(/.*intro/);
});


import { ElectronApplication, JSHandle, Page, expect, test } from "@playwright/test";
import {
  clickMenuItemById,
  findLatestBuild,
  ipcMainCallFirstListener,
  ipcRendererCallFirstListener,
  parseElectronApp,
  ipcMainInvokeHandler,
  ipcRendererInvoke
} from 'electron-playwright-helpers'

const { _electron: electron } = require('playwright');
let electronApp: ElectronApplication;

test.beforeAll(async () => {
  electronApp = await electron.launch({ args: ['./dist/integration-test/test-app/index.js'] });
  electronApp.on('window', async (page) => {
    const filename = page.url()?.split('/').pop()
    console.log(`Window opened: ${filename}`)

    // capture errors
    page.on('pageerror', (error) => {
      console.error(error)
    })
    // capture console messages
    page.on('console', (msg) => {
      console.log(msg.text())
    })
  })

});

// (async () => {
//   // Launch Electron app.

//   // Evaluation expression in the Electron context.
//   const appPath: string = await electronApp.evaluate(async ({ app }) => {
//     // This runs in the main Electron process, parameter here is always
//     // the result of the require('electron') in the main app script.
//     return app.getAppPath();
//   });
//   console.log(appPath);

//   // Get the first window that the app opens, wait if necessary.
//   const window = await electronApp.firstWindow();
//   // Print the title.
//   console.log(await window.title());
//   // // Capture a screenshot.
//   // await window.screenshot({
//   //   animations: "allow",
//   //   path: './src/integration-test/intro.png'
//   // });
//   // Direct Electron console to Node terminal.
//   window.on('console', console.log);
//   // Click button.
//   await window.click('text=Sign In');
// })();

test.afterAll(async () => {
  // Exit app.
  await electronApp.close();
});

let page: Page

test('evaluate expression', async () => {
  // Evaluation expression in the Electron context.
  const appPath: string = await electronApp.evaluate(async ({ app }) => {
    // This runs in the main Electron process, parameter here is always
    // the result of the require('electron') in the main app script.
    return app.getAppPath();
  });
  console.log(appPath);
})

test('"sign in" and "sign out" button exist', async () => {
  page = await electronApp.firstWindow();
  await expect(page.getByRole('button', { name: 'Sign In' })).toBeVisible();
  await expect(page.getByRole('button', { name: 'Sign Out' })).toBeVisible();
})

test('sign in successful', async () => {
  await page.getByRole('button', { name: 'Sign In' }).click();
  const browser: JSHandle<Page> = await electronApp.browserWindow(page);
  await page.getByRole('button', { name: 'Sign Out' }).click();
})

test('sign out error', async () => {
  await page.getByRole('button', { name: 'Sign Out' }).click();
  // page.on('pageerror', (error) => {
  //   expect(error).toContain("Error invoking remote method");
  // })
})